{"version":3,"sources":["App.js","index.js"],"names":["defaultPerformances","performances","name","id","tempo","notes","selectedPerformanceId","performanceActive","showSetTempo","exportViewVisible","importViewVisible","mainPanelView","editingPerformance","savePerformances","localStorage","setItem","JSON","stringify","performancesJson","getItem","parse","loadPerformances","performancesReducer","action","type","produce","push","performance","filter","performanceId","i","target","increment","length","data","from","to","f","splice","moveItem","e","console","error","targetIndex","Number","Math","round","appMainPanelView","PerformancesContext","createContext","PerformancesDispatchContext","usePerformances","useContext","usePerformancesDispatch","useSelectedPerformance","PerformancesProvider","children","useReducer","performances2","dispatch","Provider","value","Button","props","className","variant","Input","forwardRef","ref","TextArea","internalRef","useRef","useEffect","current","style","height","scrollHeight","overflowY","maxHeight","onInput","useCallback","App","AppToolbarAndMainPanelView","AppToolbar","AppMainPanelView","fontWeight","onClick","PerformanceList","PerformanceViewOrNothing","PerformancesToolbar","useState","open","window","confirm","PerformanceListItems","map","PerformanceListItem","ExportView","ImportView","PerformanceAddListItem","editing","setEditing","PerformanceListItemEditMode","PerformanceListItemViewMode","class","cursor","stopPropagation","performanceName","setPerformanceName","performanceNameInputRef","select","focus","save","handleKeyDown","event","key","placeholder","onChange","onKeyDown","addDisabled","trim","addPerformance","Date","toISOString","disabled","PerformanceView","Dot","size","rest","width","borderRadius","backgroundColor","transition","display","alignItems","justifyContent","performanceDetails","setName","setNotes","usePerformanceDetails","PerformanceTitleToolbar","PerformanceTitle","PerformanceNotes","PerformanceEditToolbar","PerformanceMetronomeView","performanceNumber","findPerformanceIndex","totalPerformances","PreviousPerformanceButton","NextPerformanceButton","previousDisabled","nextDisabled","PerformanceNotesEditMode","PerformanceNotesViewMode","readOnly","ActiveMetronome","InactiveMetronome","SetTempoView","IncrementButtons","setTempo","TapTempoInput","TypeTempoInput","taps","log","tapsWindowSize","slice","intervalMs","tapsIntervals","tap","avg","reduce","sum","el","bpm","isNaN","handleTap","tickRef","tick","setTimeout","interval","setInterval","clearInterval","json","copied","setCopied","timeout","clearTimeout","setSelectionRange","document","execCommand","setJson","alert","rootElement","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.62d74f9d.chunk.js","sourcesContent":["import \"./styles.css\";\nimport {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useReducer,\n  useRef,\n  useState\n} from \"react\";\nimport produce from \"immer\";\n\n// todo how to continue the \"mocking\" process WITH bootstrap styles\n// I find that seeing the styling makes me stop seeing behavior\n// and makes me start seeing \"finish\"\n// todo build out the navbar design\n// todo the difficulty of finding the visual component in the code\n// what is it called?\n// I can't just search for \"tempo\", because\n// that is a property that is used in many places\n//\n// the challenge is that when doing the steps of development on a working application\n// i have to try to develop it while still being able to use the app\n// but the initial steps of dev require me to make the app look bad\n// so...that motivates me to skip dev steps...\n// how do we beat that?\n// it's related to how i build out a java feature while still\n// letting everything compile\n// then eventually i wire it in\n// can that be done here?\n// almost like feature flags...\n// ...approach 1 = wrap a component in a <Feature> component?\n// ...approach 2 = use plain html components\n// ...approach 3 =\n//\n// the test here is on adding the edit performance name feature\n// to the performance view\n// we are going to take approach 2\n// 3 phases:\n// 1. sketch phase\n// 2. wiring phase\n// 3. styling phase\n\nfunction calculateIntervalMs(bpm) {\n  if (bpm <= 0) {\n    // don't allow div 0, or negative tempos\n    // so just use 42 by default\n    return 42;\n  } else {\n    return 60000 / bpm;\n  }\n}\n\nfunction calculateBpm(intervalMs) {\n  if (intervalMs <= 0) {\n    // don't allow div 0, or negative tempos\n    // so just use 42 by default\n    return 42;\n  } else {\n    return 60000 / intervalMs;\n  }\n}\n\nfunction moveItem(data, from, to) {\n  // remove `from` item and store it\n  var f = data.splice(from, 1)[0];\n  // insert stored item into position `to`\n  data.splice(to, 0, f);\n}\n\nfunction findPerformanceIndex(performances, performanceId) {\n  for (let i = 0; i < performances.length; i++) {\n    if (performances[i].id === performanceId) {\n      return i;\n    }\n  }\n\n  return null;\n}\n\nconst defaultPerformances = {\n  performances: [\n    {\n      name: \"performance 1\",\n      id: \"a\",\n      tempo: 72,\n      notes: \"notes 1\"\n    },\n    {\n      name: \"performance 2\",\n      id: \"b\",\n      tempo: 72,\n      notes: \"notes 2\"\n    },\n    {\n      name: \"performance 3\",\n      id: \"c\",\n      tempo: 72,\n      notes: \"notes 3\"\n    }\n  ],\n  selectedPerformanceId: \"c\",\n  performanceActive: false,\n  showSetTempo: false,\n  exportViewVisible: false,\n  importViewVisible: false,\n  mainPanelView: \"performancesList\",\n  editingPerformance: false\n};\n\nfunction savePerformances(performances) {\n  localStorage.setItem(\"app.performances\", JSON.stringify(performances));\n\n  return performances;\n}\n\nfunction loadPerformances() {\n  let performancesJson = localStorage.getItem(\"app.performances\");\n\n  if (performancesJson != null) {\n    return JSON.parse(performancesJson);\n  } else {\n    return defaultPerformances;\n  }\n}\n\nfunction debounce(func, timeout = 300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n\nlet performances = loadPerformances();\n\nfunction performancesReducer(performances, action) {\n  switch (action.type) {\n    case \"add\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          performances.performances.push(action.performance);\n        })\n      );\n    }\n    case \"delete\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          performances.performances = performances.performances.filter(\n            (performance) => {\n              return performance.id !== action.performanceId;\n            }\n          );\n\n          if (performances.selectedPerformanceId === action.performanceId) {\n            performances.selectedPerformanceId = null;\n            performances.performanceActive = false;\n          }\n        })\n      );\n    }\n    case \"deleteAll\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          performances.performances = [];\n\n          performances.selectedPerformanceId = null;\n          performances.performanceActive = false;\n        })\n      );\n    }\n    case \"setPerformanceName\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          const performance = performances.performances.filter(\n            (performance) => performance.id === action.performanceId\n          )[0];\n\n          performance.name = action.name;\n        })\n      );\n    }\n    case \"move\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          let i = 0;\n          for (let performance of performances.performances) {\n            if (performance.id === action.performanceId) {\n              break;\n            }\n\n            i++;\n          }\n\n          let target = i + action.increment;\n\n          if (target !== -1 && target < performances.performances.length) {\n            // don't allow to move past beginning of list\n            // don't allow to move pas end of list\n            try {\n              moveItem(performances.performances, i, target);\n            } catch (e) {\n              console.error(\"error moving item from \" + i + \" to \" + target, e);\n            }\n          }\n        })\n      );\n    }\n    case \"open\": {\n      return produce(performances, (performances) => {\n        performances.selectedPerformanceId = action.performanceId;\n        performances.performanceActive = false;\n        performances.mainPanelView = \"performance\";\n      });\n    }\n    case \"close\": {\n      return produce(performances, (performances) => {\n        performances.selectedPerformanceId = null;\n        performances.performanceActive = false;\n      });\n    }\n    case \"previous\": {\n      return produce(performances, (performances) => {\n        let i = 0;\n        for (let performance of performances.performances) {\n          if (performance.id === action.performanceId) {\n            break;\n          }\n\n          i++;\n        }\n\n        let targetIndex = i - 1;\n\n        if (i <= 0) {\n          // we are at the beginning of the list, so go to the end\n          targetIndex =\n            performances.performances.length === 0\n              ? null\n              : performances.performances.length - 1;\n        }\n\n        performances.selectedPerformanceId =\n          targetIndex == null\n            ? null\n            : performances.performances[targetIndex].id;\n\n        performances.performanceActive = false;\n        performances.editingPerformance = false;\n      });\n    }\n    case \"next\": {\n      return produce(performances, (performances) => {\n        let i = 0;\n        for (let performance of performances.performances) {\n          if (performance.id === action.performanceId) {\n            break;\n          }\n\n          i++;\n        }\n\n        let targetIndex = i + 1;\n\n        if (i >= performances.performances.length - 1) {\n          // we are at the end of the list, so go to the beginning\n          targetIndex = performances.performances.length === 0 ? null : 0;\n        }\n\n        performances.selectedPerformanceId =\n          targetIndex == null\n            ? null\n            : performances.performances[targetIndex].id;\n\n        performances.performanceActive = false;\n        performances.editingPerformance = false;\n      });\n    }\n    case \"start\": {\n      return produce(performances, (performances) => {\n        performances.performanceActive = true;\n      });\n    }\n    case \"stop\": {\n      return produce(performances, (performances) => {\n        performances.performanceActive = false;\n      });\n    }\n    case \"incrementTempo\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          const performance = performances.performances.filter(\n            (performance) => performance.id === action.performanceId\n          )[0];\n\n          performance.tempo += Number(action.increment);\n        })\n      );\n    }\n    case \"setTempo\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          const performance = performances.performances.filter(\n            (performance) => performance.id === action.performanceId\n          )[0];\n\n          if (action.tempo > 300) {\n            performance.tempo = 42;\n          } else {\n            performance.tempo = Math.round(Number(action.tempo));\n          }\n        })\n      );\n    }\n    case \"showSetTempo\": {\n      return produce(performances, (performances) => {\n        performances.showSetTempo = true;\n      });\n    }\n    case \"hideSetTempo\": {\n      return produce(performances, (performances) => {\n        performances.showSetTempo = false;\n      });\n    }\n    case \"setNotes\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          const performance = performances.performances.filter(\n            (performance) => performance.id === action.performanceId\n          )[0];\n\n          performance.notes = action.notes;\n        })\n      );\n    }\n    case \"toggleImportView\": {\n      return produce(performances, (performances) => {\n        performances.importViewVisible = action.importViewVisible;\n        performances.exportViewVisible = false;\n      });\n    }\n    case \"toggleExportView\": {\n      return produce(performances, (performances) => {\n        performances.exportViewVisible = action.exportViewVisible;\n        performances.importViewVisible = false;\n      });\n    }\n    case \"toggleAppMainPanelView\": {\n      return produce(performances, (performances) => {\n        performances.mainPanelView = action.appMainPanelView;\n        performances.editingPerformance = false;\n        performances.performanceActive = false;\n      });\n    }\n    case \"import\": {\n      return savePerformances(\n        produce(performances, (performances) => {\n          performances.performances = action.performances;\n        })\n      );\n    }\n    case \"toggleEditingPerformance\": {\n      return produce(performances, (performances) => {\n        performances.editingPerformance = action.editingPerformance;\n      });\n    }\n    default: {\n      return performances;\n    }\n  }\n}\n\nconst PerformancesContext = createContext();\nconst PerformancesDispatchContext = createContext();\n\nfunction usePerformances() {\n  return useContext(PerformancesContext);\n}\n\nfunction usePerformancesDispatch() {\n  return useContext(PerformancesDispatchContext);\n}\n\nfunction useSelectedPerformance() {\n  const performances = usePerformances();\n\n  for (let performance of performances.performances) {\n    if (performance.id === performances.selectedPerformanceId) {\n      return performance;\n    }\n  }\n\n  return null;\n}\n\nfunction PerformancesProvider({ children }) {\n  const [performances2, dispatch] = useReducer(\n    performancesReducer,\n    performances\n  );\n\n  return (\n    <PerformancesContext.Provider value={performances2}>\n      <PerformancesDispatchContext.Provider value={dispatch}>\n        {children}\n      </PerformancesDispatchContext.Provider>\n    </PerformancesContext.Provider>\n  );\n}\n\nfunction Button(props) {\n  let className = \"btn\";\n\n  let variant = props.variant != null ? props.variant : \"light\";\n\n  className += \" btn-\" + variant;\n\n  return (\n    <button className={className} {...props}>\n      {props.children}\n    </button>\n  );\n}\n\nconst Input = forwardRef((props, ref) => {\n  return <input ref={ref} className=\"form-control\" {...props} />;\n});\n\nconst TextArea = forwardRef((props, ref) => {\n  let internalRef = useRef();\n\n  if (ref == null) {\n    // a forward ref was not provided\n    // so use internal ref\n    ref = internalRef;\n  }\n\n  useEffect(() => {\n    ref.current.style.height = 0;\n    ref.current.style.height = ref.current.scrollHeight + \"px\";\n    ref.current.style.overflowY = props.maxHeight != null ? \"scroll\" : \"hidden\";\n    ref.current.style.maxHeight =\n      props.maxHeight != null ? props.maxHeight + \"rem\" : null;\n  }, [ref, props.value, props.maxHeight]);\n\n  const onInput = useCallback(() => {\n    ref.current.style.height = 0;\n    ref.current.style.height = ref.current.scrollHeight + \"px\";\n  }, [ref]);\n\n  return (\n    <textarea\n      ref={ref}\n      onInput={onInput}\n      className=\"form-control\"\n      {...props}\n    ></textarea>\n  );\n});\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <PerformancesProvider>\n        {/* <PerformanceList />\n        <PerformanceViewOrNothing performance={performance} /> */}\n        <AppToolbarAndMainPanelView />\n      </PerformancesProvider>\n    </div>\n  );\n}\n\nfunction AppToolbarAndMainPanelView() {\n  return (\n    <div className=\"mb-5\">\n      <AppToolbar />\n      {/* <hr className=\"mt-2 mb-2\" /> */}\n      <AppMainPanelView />\n    </div>\n  );\n}\n\nfunction AppToolbar() {\n  let dispatch = usePerformancesDispatch();\n  let performances = usePerformances();\n\n  return (\n    <div className=\"p-2 pt-3 bg-light\">\n      <Button\n        variant=\"link\"\n        style={{\n          fontWeight:\n            performances.mainPanelView === \"performancesList\"\n              ? \"bold\"\n              : \"initial\"\n        }}\n        onClick={() => {\n          dispatch({\n            type: \"toggleAppMainPanelView\",\n            appMainPanelView: \"performancesList\"\n          });\n        }}\n      >\n        Performance List\n      </Button>\n      <Button\n        variant=\"link\"\n        style={{\n          fontWeight:\n            performances.mainPanelView === \"performance\" ? \"bold\" : \"initial\"\n        }}\n        onClick={() => {\n          dispatch({\n            type: \"toggleAppMainPanelView\",\n            appMainPanelView: \"performance\"\n          });\n        }}\n      >\n        Performance\n      </Button>\n    </div>\n  );\n}\n\nfunction AppMainPanelView() {\n  let performances = usePerformances();\n\n  return (\n    <div>\n      {performances.mainPanelView === \"performancesList\" && <PerformanceList />}\n      {performances.mainPanelView === \"performance\" && (\n        <PerformanceViewOrNothing />\n      )}\n    </div>\n  );\n}\n\nfunction PerformancesToolbar() {\n  let performances = usePerformances();\n  let dispatch = usePerformancesDispatch();\n\n  let [open, setOpen] = useState(true);\n\n  return (\n    <div className=\"d-flex justify-content-end gap-2 my-3 mx-2\">\n      {open && (\n        <div className=\"d-flex justify-content-center gap-2\">\n          <Button\n            onClick={() => {\n              dispatch({\n                type: \"toggleExportView\",\n                exportViewVisible: true\n              });\n            }}\n          >\n            Export\n          </Button>\n          <Button\n            onClick={() => {\n              dispatch({\n                type: \"toggleImportView\",\n                importViewVisible: true\n              });\n            }}\n          >\n            Import\n          </Button>\n          <Button\n            onClick={() => {\n              let confirmation = window.confirm(\n                \"Are you sure you want to delete all performances?\"\n              );\n\n              if (confirmation) {\n                dispatch({\n                  type: \"deleteAll\"\n                });\n              }\n            }}\n          >\n            Delete All\n          </Button>\n        </div>\n      )}\n\n      {/* <div>\n        <Button\n          onClick={() => {\n            setOpen(!open);\n          }}\n        >\n          ...\n        </Button>\n      </div> */}\n    </div>\n  );\n}\n\nfunction PerformanceList() {\n  let performances = usePerformances();\n\n  let PerformanceListItems = performances.performances.map((performance) => {\n    return (\n      // <li\n      //   key={performance.id}\n      //   class=\"list-group-item _list-group-item-action\"\n      //   style={{ cursor: \"pointer\" }}\n      // >\n      <PerformanceListItem key={performance.id} performance={performance} />\n      // </li>\n    );\n  });\n\n  return (\n    <div>\n      <div className=\"m-2\">\n        <PerformancesToolbar />\n      </div>\n      {performances.exportViewVisible && (\n        <div className=\"mb-3\">\n          <ExportView />\n        </div>\n      )}\n      {performances.importViewVisible && (\n        <div className=\"mb-3\">\n          <ImportView />\n        </div>\n      )}\n      <div className=\"m-3\">\n        <PerformanceAddListItem />\n      </div>\n      <ul className=\"list-group\">\n        {/* <li className=\"list-group-item\">\n          <PerformanceAddListItem />\n        </li> */}\n        {PerformanceListItems}\n      </ul>\n    </div>\n  );\n}\n\nfunction PerformanceListItem({ performance }) {\n  let [editing, setEditing] = useState(false);\n\n  return editing ? (\n    <PerformanceListItemEditMode\n      performance={performance}\n      setEditing={setEditing}\n    />\n  ) : (\n    <PerformanceListItemViewMode\n      performance={performance}\n      setEditing={setEditing}\n    />\n  );\n}\n\nfunction PerformanceListItemViewMode({ performance, setEditing }) {\n  let dispatch = usePerformancesDispatch();\n\n  return (\n    <li\n      class=\"list-group-item list-group-item-action\"\n      style={{ cursor: \"pointer\" }}\n    >\n      <div\n        className=\"d-flex align-items-baseline gap-2\"\n        onClick={() => {\n          dispatch({\n            type: \"open\",\n            performanceId: performance.id\n          });\n        }}\n      >\n        <span className=\"flex-grow-1\">{performance.name}</span>\n        {/* <Button\n        onClick={() =>\n          dispatch({\n            type: \"open\",\n            performanceId: performance.id\n          })\n        }\n      >\n        Open\n      </Button> */}\n        <Button\n          onClick={(e) => {\n            setEditing(true);\n            e.stopPropagation();\n          }}\n        >\n          Edit\n        </Button>\n      </div>\n    </li>\n  );\n}\n\nfunction PerformanceListItemEditMode({ performance, setEditing }) {\n  let [performanceName, setPerformanceName] = useState(performance.name);\n  let dispatch = usePerformancesDispatch();\n\n  let performanceNameInputRef = useRef();\n\n  useEffect(() => {\n    performanceNameInputRef.current.select();\n    performanceNameInputRef.current.focus();\n  }, []);\n\n  const save = () => {\n    dispatch({\n      type: \"setPerformanceName\",\n      performanceId: performance.id,\n      name: performanceName\n    });\n    setEditing(false);\n  };\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === \"Enter\") {\n        save();\n      }\n    },\n    [save]\n  );\n\n  return (\n    <li class=\"list-group-item\">\n      <div className=\"\">\n        <div>\n          <Input\n            value={performanceName}\n            ref={performanceNameInputRef}\n            placeholder=\"performance name\"\n            onChange={(e) => setPerformanceName(e.target.value)}\n            onKeyDown={handleKeyDown}\n          />\n        </div>\n        <div className=\"d-flex justify-content-end gap-2 mt-2 mb-2\">\n          <Button\n            onClick={() => {\n              dispatch({\n                type: \"move\",\n                performanceId: performance.id,\n                increment: -1\n              });\n            }}\n          >\n            Move Up\n          </Button>\n          <Button\n            onClick={() => {\n              dispatch({\n                type: \"move\",\n                performanceId: performance.id,\n                increment: 1\n              });\n            }}\n          >\n            Move Down\n          </Button>\n\n          <Button\n            onClick={() => {\n              const response = window.confirm(\n                \"Are you sure you want to delete this performance?\"\n              );\n\n              if (response) {\n                dispatch({\n                  type: \"delete\",\n                  performanceId: performance.id\n                });\n              }\n            }}\n          >\n            Delete\n          </Button>\n          <Button onClick={(e) => setEditing(false)}>Cancel</Button>\n          <Button variant=\"primary\" onClick={save}>\n            Save\n          </Button>\n        </div>\n      </div>\n    </li>\n  );\n}\n\nfunction PerformanceAddListItem() {\n  let dispatch = usePerformancesDispatch();\n\n  let [performanceName, setPerformanceName] = useState(\"\");\n\n  let addDisabled = performanceName.trim() === \"\";\n\n  const addPerformance = useCallback(() => {\n    dispatch({\n      type: \"add\",\n      performance: {\n        name: performanceName,\n        id: new Date().toISOString(),\n        tempo: 42,\n        notes: \"\"\n      }\n    });\n    setPerformanceName(\"\");\n  }, [dispatch, performanceName, setPerformanceName]);\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === \"Enter\") {\n        addPerformance();\n      }\n    },\n    [addPerformance]\n  );\n\n  return (\n    <div className=\"d-flex gap-2\">\n      <Input\n        value={performanceName}\n        placeholder=\"\"\n        onChange={(e) => setPerformanceName(e.target.value)}\n        onKeyDown={handleKeyDown}\n      />\n      <Button variant=\"primary\" disabled={addDisabled} onClick={addPerformance}>\n        Add\n      </Button>\n    </div>\n  );\n}\n\nfunction PerformanceViewOrNothing() {\n  let performance = useSelectedPerformance();\n\n  return (\n    <div>\n      {performance == null ? (\n        <div>No performance selected</div>\n      ) : (\n        <PerformanceView performance={performance} />\n      )}\n    </div>\n  );\n}\n\nconst Dot = forwardRef(({ size = 1, variant = \"primary\", ...rest }, ref) => {\n  let style = {\n    height: size + \"rem\",\n    width: size + \"rem\",\n    borderRadius: \"50%\",\n    backgroundColor: `var(--bs-${variant})`,\n    // transition: \"opacity 0.1s\",\n    transition: \"opacity 0.1s, background-color 0.1s, background 0.1s\",\n    cursor: rest.onClick != null ? \"pointer\" : null,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  };\n\n  let className = \"dot\";\n\n  return <div ref={ref} className={className} style={style} {...rest}></div>;\n});\n\nfunction usePerformanceDetails(performance) {\n  let [name, setName] = useState(performance.name);\n  let [notes, setNotes] = useState(performance.notes);\n  let performances = usePerformances();\n  let dispatch = usePerformancesDispatch();\n\n  useEffect(() => {\n    setName(performance.name);\n    setNotes(performance.notes);\n  }, [performance.name, performance.notes, performances.editingPerformance]);\n\n  return {\n    name,\n    setName,\n    notes,\n    setNotes,\n    save() {\n      dispatch({\n        type: \"setNotes\",\n        performanceId: performance.id,\n        notes: notes\n      });\n      dispatch({\n        type: \"setPerformanceName\",\n        performanceId: performance.id,\n        name: name\n      });\n    }\n  };\n}\n\nfunction PerformanceView({ performance }) {\n  let performanceDetails = usePerformanceDetails(performance);\n\n  return (\n    <div>\n      <PerformanceTitleToolbar performance={performance} />\n      <PerformanceTitle performance={performance} {...performanceDetails} />\n      <PerformanceNotes performance={performance} {...performanceDetails} />\n      <PerformanceEditToolbar {...performanceDetails} />\n      <PerformanceMetronomeView performance={performance} />\n    </div>\n  );\n}\n\nfunction PerformanceTitleToolbar({ performance }) {\n  let performances = usePerformances();\n\n  let flexStyle = {\n    justifyContent: \"space-between\"\n  };\n\n  let performanceNumber =\n    findPerformanceIndex(performances.performances, performance.id) + 1;\n  let totalPerformances = performances.performances.length;\n\n  return (\n    <div className=\"d-flex m-3 align-items-baseline\" style={flexStyle}>\n      <PreviousPerformanceButton />\n\n      <div>\n        <div className=\"lead\">{performance.name}</div>\n        <div>\n          <small className=\"text-muted\">\n            {performanceNumber}/{totalPerformances}\n          </small>\n        </div>\n      </div>\n      <NextPerformanceButton />\n    </div>\n  );\n}\n\nfunction PreviousPerformanceButton() {\n  let dispatch = usePerformancesDispatch();\n  let performances = usePerformances();\n\n  let previousDisabled = performances.performances.length === 1;\n\n  return (\n    <Button\n      disabled={previousDisabled}\n      onClick={() => {\n        dispatch({\n          type: \"previous\",\n          performanceId: performances.selectedPerformanceId\n        });\n      }}\n    >\n      Previous\n    </Button>\n  );\n}\n\nfunction NextPerformanceButton() {\n  let dispatch = usePerformancesDispatch();\n  let performances = usePerformances();\n\n  let nextDisabled = performances.performances.length === 1;\n\n  return (\n    <Button\n      disabled={nextDisabled}\n      onClick={() => {\n        dispatch({\n          type: \"next\",\n          performanceId: performances.selectedPerformanceId\n        });\n      }}\n    >\n      Next\n    </Button>\n  );\n}\n\nfunction PerformanceTitle({ performance, name, setName }) {\n  let performances = usePerformances();\n\n  if (performances.editingPerformance) {\n    return (\n      <div className=\"m-3\">\n        <Input\n          value={name}\n          placeholder=\"name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n    );\n  } else {\n    return null;\n    // return <div className=\"lead mt-3\">{performance.name}</div>;\n  }\n}\n\nfunction PerformanceNotes({ performance, notes, setNotes }) {\n  // let [editing, setEditing] = useState(false);\n  let performances = usePerformances();\n  // let dispatch = usePerformancesDispatch();\n\n  let editing = performances.editingPerformance;\n\n  // const setEditing = useCallback(\n  //   (editing) => {\n  //     dispatch({\n  //       type: \"toggleEditingPerformance\",\n  //       editingPerformance: editing\n  //     });\n  //   },\n  //   [dispatch]\n  // );\n\n  // useEffect(() => {\n  //   setEditing(false);\n  // }, [performance.id, setEditing]);\n\n  return editing ? (\n    <PerformanceNotesEditMode\n      performance={performance}\n      {...{ notes, setNotes }}\n      // setEditing={setEditing}\n    />\n  ) : (\n    <PerformanceNotesViewMode\n      performance={performance}\n      // setEditing={setEditing}\n    />\n  );\n}\n\nfunction PerformanceNotesViewMode({ performance, setEditing }) {\n  const preStyle = {\n    fontFamily: \"inherit\",\n    fontSize: \"inherit\",\n    textAlign: \"left\"\n  };\n\n  return (\n    <div className=\"d-flex gap-2 align-items-end m-3\">\n      <div className=\"flex-grow-1\">\n        {/* <pre style={preStyle}>{performance.notes}</pre> */}\n        <TextArea\n          readOnly\n          value={performance.notes}\n          placeholder=\"(no notes)\"\n        ></TextArea>\n      </div>\n    </div>\n  );\n}\n\nfunction PerformanceNotesEditMode({ performance, notes, setNotes }) {\n  return (\n    <div>\n      <div className=\"m-3\">\n        <TextArea\n          value={notes}\n          placeholder=\"notes\"\n          onChange={(e) => setNotes(e.target.value)}\n        ></TextArea>\n      </div>\n      {/* <div className=\"d-flex justify-content-center gap-2\">\n        <Button onClick={(e) => setEditing(false)}>Cancel</Button>\n\n        <Button\n          variant=\"primary\"\n          onClick={(e) => {\n            dispatch({\n              type: \"setNotes\",\n              performanceId: performance.id,\n              notes: notes\n            });\n            setEditing(false);\n          }}\n        >\n          Save\n        </Button>\n      </div> */}\n    </div>\n  );\n}\n\nfunction PerformanceEditToolbar({ save }) {\n  let performances = usePerformances();\n  let dispatch = usePerformancesDispatch();\n\n  if (performances.editingPerformance) {\n    return (\n      <div className=\"d-flex justify-content-end gap-2 m-3\">\n        <Button\n          onClick={() => {\n            dispatch({\n              type: \"toggleEditingPerformance\",\n              editingPerformance: false\n            });\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            save();\n            dispatch({\n              type: \"toggleEditingPerformance\",\n              editingPerformance: false\n            });\n          }}\n        >\n          Save\n        </Button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"d-flex justify-content-end gap-2 m-3\">\n        <Button\n          onClick={() => {\n            dispatch({\n              type: \"toggleEditingPerformance\",\n              editingPerformance: true\n            });\n          }}\n        >\n          Edit\n        </Button>\n      </div>\n    );\n  }\n}\n\nfunction PerformanceMetronomeView({ performance }) {\n  let performances = usePerformances();\n\n  return (\n    <div>\n      <div className=\"lead\">Tempo {performance.tempo}</div>\n      <div>\n        {performances.performanceActive ? (\n          <ActiveMetronome performance={performance} />\n        ) : (\n          <InactiveMetronome performance={performance} />\n        )}\n      </div>\n      {/* <StartStopButton /> */}\n      <div className=\"mt-4\">\n        <SetTempoView performance={performance} />\n      </div>\n    </div>\n  );\n}\n\nfunction StartStopButton() {\n  let performances = usePerformances();\n\n  if (performances.performanceActive) {\n    return <StopButton />;\n  } else {\n    return <StartButton />;\n  }\n}\n\nfunction StartButton() {\n  let dispatch = usePerformancesDispatch();\n  let performance = useSelectedPerformance();\n\n  return (\n    <Button\n      variant=\"primary\"\n      onClick={() => {\n        dispatch({ type: \"start\", performanceId: performance.id });\n      }}\n    >\n      Start\n    </Button>\n  );\n}\n\nfunction StopButton() {\n  let dispatch = usePerformancesDispatch();\n\n  return (\n    <Button\n      variant=\"secondary\"\n      onClick={() => {\n        dispatch({ type: \"stop\" });\n      }}\n    >\n      Stop\n    </Button>\n  );\n}\n\nfunction IncrementButtons({ performance }) {\n  let dispatch = usePerformancesDispatch();\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          dispatch({\n            type: \"incrementTempo\",\n            performanceId: performance.id,\n            increment: -1\n          });\n        }}\n      >\n        Down\n      </Button>\n\n      <Button\n        onClick={() => {\n          dispatch({\n            type: \"incrementTempo\",\n            performanceId: performance.id,\n            increment: 1\n          });\n        }}\n      >\n        Up\n      </Button>\n    </>\n  );\n}\n\nfunction SetTempoView({ performance }) {\n  let dispatch = usePerformancesDispatch();\n\n  let setTempo = (tempo) => {\n    dispatch({\n      type: \"setTempo\",\n      performanceId: performance.id,\n      tempo: tempo\n    });\n  };\n\n  return (\n    <div className=\"d-flex justify-content-center gap-2 m-3\">\n      {/* <div>Set Tempo View</div> */}\n      <TapTempoInput tempo={performance.tempo} setTempo={setTempo} />\n      <TypeTempoInput\n        performance={performance}\n        tempo={performance.tempo}\n        setTempo={setTempo}\n      />\n      <IncrementButtons performance={performance} />\n\n      {/* <button\n        onClick={(e) => {\n          dispatch({\n            type: \"hideSetTempo\"\n          });\n        }}\n      >\n        Cancel\n      </button> */}\n\n      {/* <Button\n        onClick={() => {\n          dispatch({\n            type: \"setTempo\",\n            performanceId: performance.id,\n            tempo: performance.tempo\n          });\n          // dispatch({\n          //   type: \"hideSetTempo\"\n          // });\n        }}\n      >\n        Set Tempo\n      </Button> */}\n    </div>\n  );\n}\n\nfunction TypeTempoInput({ performance, tempo, setTempo }) {\n  // let [tempo, setTempo] = useState(performance.tempo);\n\n  return (\n    <span>\n      <Input\n        type=\"number\"\n        onChange={(e) => setTempo(e.target.value)}\n        value={tempo}\n        style={{ width: \"6rem\" }}\n      />\n    </span>\n  );\n}\n\nfunction TapTempoInput({ setTempo }) {\n  let taps = [];\n  let tapsWindowSize = 4;\n\n  const handleTap = () => {\n    taps.push(new Date() - 0);\n\n    if (taps.length > tapsWindowSize + 1) {\n      // reduce the array back down to the correct size\n      // before we average the values\n      taps = taps.slice(1);\n    }\n\n    // now average the values\n    const tapsIntervals = taps.map((tap, i) => {\n      if (i === 0) {\n        return 0;\n      } else {\n        return tap - taps[i - 1];\n      }\n    });\n\n    let avg =\n      tapsIntervals.slice(1).reduce((sum, el) => sum + el, 0) /\n      (tapsIntervals.length - 1);\n\n    let bpm = Math.round(calculateBpm(avg));\n\n    console.log(\"tempo bpm \" + bpm, avg, taps);\n\n    if (setTempo != null && !isNaN(bpm)) {\n      setTempo(bpm);\n    }\n  };\n\n  return (\n    <Button\n      onClick={() => {\n        console.log(\"tap tempo\");\n        handleTap();\n      }}\n    >\n      Tap\n    </Button>\n  );\n}\n\nfunction ActiveMetronome({ performance }) {\n  const dispatch = usePerformancesDispatch();\n  const tickRef = useRef();\n\n  const tick = () => {\n    try {\n      if (tickRef.current != null) {\n        // tickRef.current.style.fontWeight = \"bold\";\n        // tickRef.current.style.visibility = \"visible\";\n        // tickRef.current.style.opacity = \"100\";\n        tickRef.current.style.backgroundColor = \"var(--bs-primary)\";\n        // tickRef.current.style.background =\n        //   \"radial-gradient(circle, var(--bs-primary) 0%, var(--bs-light) 100%)\";\n      }\n    } catch (e) {\n      console.error(\"error in tick\", e);\n    }\n\n    setTimeout(() => {\n      try {\n        if (tickRef.current != null) {\n          // tickRef.current.style.fontWeight = \"normal\";\n          // tickRef.current.style.visibility = \"hidden\";\n          // tickRef.current.style.opacity = \"0\";\n          tickRef.current.style.backgroundColor = \"var(--bs-light)\";\n          // tickRef.current.style.background =\n          //   \"radial-gradient(circle, var(--bs-light) 0%, var(--bs-light) 100%)\";\n        }\n      } catch (e) {\n        console.error(\"error in tick\", e);\n      }\n    }, 75);\n  };\n\n  useEffect(() => {\n    tick();\n\n    if (performance.tempo > 0) {\n      let interval = setInterval(() => {\n        tick();\n      }, calculateIntervalMs(performance.tempo));\n\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [performance.tempo]);\n\n  return (\n    <div>\n      <div className=\"d-flex justify-content-center m-2\">\n        <Dot\n          ref={tickRef}\n          size={8}\n          variant=\"light\"\n          onClick={() => {\n            dispatch({\n              type: \"stop\"\n            });\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction InactiveMetronome({ performance }) {\n  const dispatch = usePerformancesDispatch();\n\n  return (\n    <div className=\"d-flex justify-content-center m-2\">\n      <Dot\n        size={8}\n        variant=\"light\"\n        onClick={() => {\n          dispatch({\n            type: \"start\"\n          });\n        }}\n      >\n        <div>Start</div>\n      </Dot>\n    </div>\n  );\n}\n\nfunction ExportView() {\n  let ref = useRef();\n  let performances = usePerformances();\n  let dispatch = usePerformancesDispatch();\n\n  let json = JSON.stringify(performances.performances);\n\n  let [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (copied) {\n      let timeout = window.setTimeout(() => {\n        setCopied(false);\n      }, 3000);\n\n      return () => {\n        window.clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n\n  let copy = () => {\n    console.log(\"Export json\", ref.current.value);\n\n    ref.current.select();\n    ref.current.setSelectionRange(0, 99999); // For mobile devices\n\n    // navigator.clipboard.writeText(ref.current.value);\n\n    document.execCommand(\"copy\");\n\n    setCopied(true);\n  };\n\n  return (\n    <div>\n      <div className=\"m-3\">\n        <TextArea readOnly ref={ref} value={json} maxHeight={10}>\n          {\"{json}\"}\n        </TextArea>\n      </div>\n      <div className=\"d-flex justify-content-center gap-2\">\n        <Button\n          onClick={() => {\n            dispatch({\n              type: \"toggleExportView\",\n              exportViewVisible: false\n            });\n          }}\n        >\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={copy}>\n          {copied ? \"Copied!\" : \"Copy\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ImportView() {\n  let dispatch = usePerformancesDispatch();\n\n  let [json, setJson] = useState(\n    `[{\"name\":\"performance 1\",\"id\":\"a\",\"tempo\":72,\"notes\":\"notes 1\"}]`\n  );\n\n  return (\n    <div>\n      <div className=\"m-3\">\n        <TextArea\n          value={json}\n          onChange={(e) => setJson(e.target.value)}\n          maxHeight={10}\n        ></TextArea>\n      </div>\n      <div className=\"d-flex justify-content-center gap-2\">\n        <Button\n          onClick={() => {\n            dispatch({\n              type: \"toggleImportView\",\n              importViewVisible: false\n            });\n          }}\n        >\n          Close\n        </Button>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            try {\n              let performances = JSON.parse(json);\n\n              dispatch({\n                type: \"import\",\n                performances: performances\n              });\n            } catch (e) {\n              console.error(\"Error parsing JSON\", e);\n              window.alert(\"Error parsing JSON: \" + e);\n            }\n          }}\n        >\n          Import\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}